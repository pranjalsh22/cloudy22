import streamlit as st
import runpy
import os

#link:
# https://github.com/pranjalsh22/cloudy22/blob/main/Poster_2024-11_ISSAC2024_Pranjal_v10-final.pdf

#------------SIDEBAR---------

st.sidebar.title("Authors")

st.sidebar.markdown("""
**Pranjal Sharma**  
Amity Institute of Applied Sciences,  
Amity University Uttar Pradesh, Noida, India  
[Email](mailto:pranjalsh22@gmail.com)

---

**Dr. Chiranjib Konar**  
Amity Institute of Applied Sciences,  
Amity University Uttar Pradesh, Noida, India  
[Email](mailto:chiranjib.konar@gmail.com)  

---

**Dr. Shubhrangshu Ghosh**  
Centre for Astrophysics, Gravitation and Cosmology,  
Department of Physics, SRM University, Sikkim, India  
""")

#-----------
import base64

def display_poster_html(image_file, preview_width=400):
    with open(image_file, "rb") as f:
        data = f.read()
    encoded = base64.b64encode(data).decode()
    
    st.markdown(
        f"""
        <div style="text-align:center;">
            <img src="data:image/jpg;base64,{encoded}" 
                 style="max-width:90%; width:{preview_width}px; border:4px solid #ccc; box-shadow:5px 5px 15px rgba(0,0,0,0.3); border-radius:8px;">
        </div>
        """,
        unsafe_allow_html=True
    )

#-----------
st.set_page_config(page_title="My Streamlit App", layout="wide")

# Paths to your scripts
PAGES = {
    "Home": {"path": None, "logo": "üè†"},
    "Continuum File": {"path": "pages/save_continuum_file.py", "logo": "üíæ"},
    "Cloudy Out File": {"path": "pages/cloudy_out_file.py", "logo": "‚òÅÔ∏è"}
}

if "page" not in st.session_state:
    st.session_state.page = "Home"

cols = st.columns(len(PAGES))
for i, (name, details) in enumerate(PAGES.items()):
    if cols[i].button(f"{details['logo']} {name}"):
        st.session_state.page = name

st.markdown("---")
#-----------------MAKING HOME PAGE---------------------------
if st.session_state.page == "Home":
    st.title("CLOUDY output file interpretor")
    st.write("### Developed by **Pranjal Sharma**")
    
    st.write("""
    The purpose of this web application is to provide a streamlined environment 
    for analysing the output generated by **CLOUDY**, the widely used photoionization 
    and spectral synthesis code. By integrating parsing tools and visualization 
    routines, the app allows users to interpret complex simulation outputs with ease.
    """)
    
    st.header("Analysis of the `.out` File")
    st.write("""
    CLOUDY produces a detailed `.out` file that contains a comprehensive record of 
    physical conditions, line strengths, and ionization states within the simulated medium.  
    This application extracts the relevant emission-line data and displays it in a structured 
    and visual form, enabling efficient comparison across models.
    """)
    
    st.header("Analysis of the Continuum File")
    st.write("""
    In addition to line diagnostics, CLOUDY can generate a **continuum file** 
    (using the `save continuum` command).  
    This file provides the spectral energy distribution (SED) of the ionizing source 
    and the surrounding gas.  
    
    By analysing the continuum, one can estimate the **bolometric luminosity** of the 
    cloud or the central source, as well as investigate the relative contributions 
    from different wavelength regimes (e.g., UV, optical, infrared).  
    Such diagnostics are essential for constraining the physical state of 
    active galactic nuclei (AGN), H II regions, and other astrophysical environments.
    """)

    st.header(" Our work")
    st.title("An Insight into Spectral States in Radio-Loud AGNs")
    col1,col2=st.columns(2)
    with col2:
        st.header("Poster")
        st.link_button("ISSAC-2024","https://www.astron-soc.in/node/594")
        display_poster_html('poster.jpg',600)
        
        # Links to the codes
        st.subheader("Accretion disk spectrum")
        column1, column2 = st.columns(2)
        with column1:
            st.link_button("üîó ACCLUM (v1)", "https://accretion-disk-spectrum.streamlit.app")
        with column2:
            st.link_button("üîó ACCLUM 2 (in development)", "https://acclum2.streamlit.app")
        
    with col1:
        st.header("Book chapter")
        
        # Publication info
        st.subheader("Publication")
        st.write("""
        This work will appear in the forthcoming volume:  
        **‚ÄúRecent Advances in Astrophysics and Cosmology towards the Mega Telescope Era‚Äù**,  
        to be published in the **Astrophysics and Space Science Proceedings** series 
        (Springer Nature).  
        
        This book series is indexed in **Scopus**.  
        """)
        st.link_button("View Series on Springer", "https://link.springer.com/series/7395")
        
        st.header("Abstract")
        st.write("""
        In this study, we investigate whether **high-excitation radio galaxies (HERGs)** 
        can be interpreted as analogues of the accretion states observed in 
        **stellar-mass black hole X-ray binaries (BHXRBs)**. 
        
        Using a self-developed Python code (**ACCLUM**), we compute the spectrum of a 
        standard accretion disk for a range of black hole masses and accretion parameters. 
        Subsequently, the spectral synthesis code **CLOUDY** was employed to simulate the 
        [O III] Œª5007 √Ö emission from narrow-line region (NLR) clouds photoionized by the 
        disk spectrum. 
        
        The accretion disk was modeled with an **inner truncation at 50 RS** to allow 
        for the presence of an inner advective flow, potentially responsible for jet launching. 
        Our computations demonstrate that such a truncated disk is still capable of 
        producing sufficient ultraviolet luminosity to reproduce the observed [O III] 
        line luminosities in HERGs. """)
    st.header("Conclusion:")  
    st.write("""This result supports the interpretation that HERGs may correspond to the 
        **very high/intermediate accretion states (VHS/IS)** of BHXRBs, in which 
        radiatively efficient disks and strong relativistic jets can coexist.
        """)
        

else:
    page_path = PAGES[st.session_state.page]["path"]
    if page_path and os.path.exists(page_path):
        # Execute the page script just like running `streamlit run <file>`
        runpy.run_path(page_path, run_name="__main__")
    else:
        st.error(f"Page not found: {page_path}")
